#!/usr/bin/env python

###  example agent output: #################################################################
#
# <<<backuppc_report>>>
#warn_flags,backup_number,host_name,date_time,size_mb,lvl,duratation_min,xfer_err,share_err,file_err,tar_err,age_days
#,184,host1,2019-07-24 01:45,3483,1,0,0,0,0,0,22
#,185,host1,2019-07-25 01:08,3481,1,1,0,0,0,0,21
#,186,host1,2019-07-26 01:07,3486,1,2,0,0,0,0,20
#,187,host1,2019-07-27 01:19,3501,0,16,0,0,0,0,19
#,188,host1,2019-07-28 01:02,3506,1,1,0,0,0,0,18
#,190,host2,2019-07-24 01:01,4909,1,3,0,0,0,0,22
#,191,host2,2019-07-25 01:00,4835,1,3,0,0,0,0,21
#,192,host2,2019-07-26 01:02,4864,0,4,0,0,0,0,20
#,193,host2,2019-07-27 01:09,4805,1,12,0,0,0,0,19
#E,67,host3,2019-08-09 18:15,86918,1,7,5,0,0,5,6
#E,68,host3,2019-08-10 18:00,86806,1,8,3,0,0,3,5
#,70,host3,2019-08-10 20:42,86780,1,2,0,0,0,0,4
#E,72,host3,2019-08-11 18:48,86890,1,8,3,0,0,3,4
#E,73,host3,2019-08-12 17:41,86934,1,11,3,0,0,3,3
#E,74,host3,2019-08-14 19:02,87159,1,31,3,0,0,3,1
#ED,75,host3,2019-08-15 19:02,86925,1,10,3,0,0,3,0
#
#
# run check from cli 
# cmk --checks=backuppc_report -I <hostname>
# cmk --checks=backuppc_report -nvp <hostname>
#
############################################################################################

############################################################################################
# HELPER FUNCTIONS
############################################################################################

# set ok_code checks if the ok_code is higher
def set_ok_code(current_ok_code=int(), new_ok_code=int()):
    ok_code = current_ok_code
    if new_ok_code > ok_code:
        ok_code = new_ok_code

    return ok_code

# check_threshold 
# if threshold is set to "-1" and return None else return value 
def check_threshold(threshold=int()):
    if threshold == -1:
        return None
    else:
        return threshold


############################################################################################
# INVENTORY FUNCTIONS
############################################################################################
def inventory_backuppc_report(info):
    last_host=str()
    current_host=str()
    for line in info:
        # skip header line
        if 'warn_flags,backup_number,host_name' in line[0]:
            continue

        # if a new host is detected yield it
        current_host=str(line[0]).split(',')[2]
        if current_host != last_host:
            last_host=current_host
            yield current_host, None


def inventory_backuppc_summary(info):
    if len(info) >= 1:
        yield "", None

############################################################################################
# DEFAULT LEVELS
############################################################################################

factory_settings['default_levels_backuppc_summary'] = {
    'hosts_overage': (1, 2),
    'hosts_disabled': (1, 1),
    'hosts_progress': (4, 8),
    'bkp_partial': (2, 3),
    'bkp_errors': (50, 60)
}

############################################################################################
# CHECK FUNCTIONS
############################################################################################
def check_backuppc_report(item, params, info):

    # handle backup hosts
    current_host=str()
    for line in info:
        # skip header line
        if 'warn_flags,backup_number,host_name' in line[0]:
            continue
    
        #print ' '.join(line)
    #print "item: " + str(item)
    #print "parems: " + str(params)
    #print "info:" + str(info)
    return 3, "Sorry - not implemented"


def check_backuppc_summary(item, params, info):
    ok_code = 0 
    output = list()
    perfdata = list()

    hosts = 0
    hosts_disabled = 0
    hosts_overage = 0
    hosts_progress = 0
    bkp_count = len(info) - 1 # ignore header line
    bkp_partial = 0
    bkp_errors = 0

    current_host=str()
    for line in info:
        if current_host != str(line[0]).split(',')[2]:
            current_host = str(line[0]).split(',')[2]
            hosts += 1

        warn_flag = str(line[0]).split(',')[0]
        if '*' in warn_flag:
            hosts_progress += 1
        if 'P' in warn_flag:
            bkp_partial += 1
        if 'E' in warn_flag:
            bkp_errors += 1
        if 'O' in warn_flag:
            hosts_overage += 1
        if 'D' in warn_flag:
            hosts_disabled += 1

    # Number of hosts
    output.append("Hosts: " + str(hosts))
    perfdata.append(('hosts', int(hosts), None, None))

    # Hosts out of date
    warn, crit = params.get('hosts_overage')
    if float(hosts_overage) >= float(warn) and float(hosts_overage) <= float(crit) and not float(warn) == -1 and not float(crit) == -1:
        ok_code = set_ok_code(ok_code, 1)
        output.append("Overaged: " + str(hosts_overage) 
                + " warn at: " + str(warn) + "(!)")
    elif float(hosts_overage) >= float(crit) and not float(crit) == -1:
        ok_code = set_ok_code(ok_code, 2)
        output.append("Overaged: " + str(hosts_overage)
                + " crit at: " + str(crit) + "(!!)")
    else:
        output.append("Overaged: " + str(hosts_overage))

    perfdata.append(('hosts_overage', int(hosts_overage), check_threshold(warn), check_threshold(crit) ))

    # Disabled Hosts
    warn, crit = params.get('hosts_disabled')
    if float(hosts_disabled) >= float(warn) and float(hosts_disabled) <= float(crit) and not float(warn) == -1 and not float(crit) == -1:
        ok_code = set_ok_code(ok_code, 1)
        output.append("Disabled: " + str(hosts_disabled)
                + " warn at: " + str(warn) + "(!)")
    elif float(hosts_disabled) >= float(crit) and not float(crit) == -1:
        ok_code = set_ok_code(ok_code, 2)
        output.append("Disabled: " + str(hosts_disabled)
                + " crit at: " + str(crit) + "(!!)")
    else:
        output.append("Disabled: " + str(hosts_disabled))

    perfdata.append(('hosts_disabled', int(hosts_disabled), warn, crit))

    # Hosts in progress
    warn = check_threshold(params.get('hosts_progress')[0])
    crit = check_threshold(params.get('hosts_progress')[1])
    output.append("In progress: " + str(hosts_progress))
    perfdata.append(('hosts_progress', int(hosts_progress), warn, crit))

    # Total Backups
    output.append("Backups: " + str(bkp_count))
    perfdata.append(('bkp_count', int(bkp_count), None, None))

    # Backup in partial state
    warn = check_threshold(params.get('bkp_partial')[0])
    crit = check_threshold(params.get('bkp_partial')[1])
    output.append("Backups partial: " + str(bkp_partial))
    perfdata.append(('bkp_partial', int(bkp_partial), warn, crit))

    # Backups with errors
    warn = check_threshold(params.get('bkp_errors')[0])
    crit = check_threshold(params.get('bkp_errors')[1])
    output.append("Backups errors: " + str(bkp_errors))
    perfdata.append(('bkp_errors', int(bkp_errors), warn, crit))

    return ok_code, ', '.join(output), perfdata


############################################################################################
# DEFINE CHECK
############################################################################################ 
check_info["backuppc_report"] = {
    'check_function':            check_backuppc_report,
    'inventory_function':        inventory_backuppc_report,
    'service_description':       'BackupPC %s' 
}


check_info["backuppc_report.summary"] = {
    'default_levels_variable':   'default_levels_backuppc_summary',
    'check_function':           check_backuppc_summary,
    'inventory_function':       inventory_backuppc_summary,
    'service_description':      'BackupPC - Summary',
    'has_perfdata':             True
}
